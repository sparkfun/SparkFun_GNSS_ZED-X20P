{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"configuration_interface/","title":"Configuration Interface","text":""},{"location":"configuration_interface/#configuration-database","title":"Configuration Database","text":"<p>All configuration settings are stored in a database by the receiver.</p> <p>The configuration database in the receiver's RAM holds the current configuration, which is used by the receiver at run-time. It is constructed on startup of the receiver from the configuration layers. The current configuration is called the RAM Layer. Any configuration in any layer is organized as Configuration Items, where each Configuration Item is referenced to by a unique Configuration Key ID and holds a single Configuration Value.</p>"},{"location":"configuration_interface/#configuration-layers","title":"Configuration Layers","text":"<p>The receiver has several configuration layers, some of the layers are read-only and others are modifiable. The layers are organized in terms of priority. Values in a high-priority layer replace values stored in a low-priority layers. At startup, the receiver reads all configuration layers and stacks up the items to create the current configuration, which is used by the receiver at run-time.</p> <p>The following configuration layers are available (in order of priority, highest priority first):</p> <ol> <li> RAM This layer contains items stored in volatile RAM. This is the Current Configuration. The value of any item can be set by the user at run-time (see UBX protocol interface) and it is effective immediately. </li> <li> BBR This layer contains items stored in the battery-backed RAM. The contents in this layer are preserved as long as a battery backup supply is provided during off periods. The value of any item can be set by the user at run-time (see UBX protocol interface) and it becomes effective when the receiver is restarted. </li> <li> Flash This layer contains items stored permanently in the external flash memory. This layer is only available if there is a usable external flash memory. The value of any item can be set by the user at run-time (see UBX protocol interface) and it becomes effective when the receiver is restarted. </li> <li> Default This layer contains all items known to the running receiver software and their hard- coded default values. Data in this layer is not writable. </li> </ol> <p>4.4.1 UBX protocol interface The following UBX protocol messages are available to access the Configuration Database: - <code>UBX-CFG-VALGET</code> to read configuration items from the database - <code>UBX-CFG-VALSET</code> to set configuration items in the database - <code>UBX-CFG-VALDEL</code> to delete configuration items from the database</p> <p>4.7 Configuration reset behavior The RAM layer is always rebuilt from the layers below when the chip's processor comes out from reset. When using UBX-CFG-RST the processor goes through a reset cycle with these reset types (resetMode field): - <code>0x00</code> hardware reset (watchdog) immediately - <code>0x01</code> controlled software reset - <code>0x04</code> hardware reset (watchdog) after shutdown See section Forcing a receiver reset in the integration manual.</p>"},{"location":"configuration_interface/#configuration-items","title":"Configuration Items","text":"Group Description <code>CFG-HW</code> Hardware configuration <code>CFG-I2C</code> Configuration of the I2C interface <code>CFG-I2CINPROT</code> Input protocol configuration of the I2C interface <code>CFG-I2COUTPROT</code> Output protocol configuration of the I2C interface <code>CFG-MSGOUT</code> Message output configuration <code>CFG-NMEA</code> NMEA protocol configuration <code>CFG-RATE</code> Navigation and measurement rate configuration <code>CFG-SPI</code> Configuration of the SPI interface <code>CFG-SPIINPROT</code> Input protocol configuration of the SPI interface <code>CFG-SPIOUTPROT</code> Output protocol configuration of the SPI interface <code>CFG-TP</code> Time pulse configuration <code>CFG-UART1</code> Configuration of the UART1 interface <code>CFG-UART1INPROT</code> Input protocol configuration of the UART1 interface <code>CFG-UART1OUTPROT</code> Output protocol configuration of the UART1 interface <p><code>CFG-NAVMASK-SV_MASK_GPS</code> - Satellite mask for the GPS system <code>CFG-NAVMASK-SV_MASK_GAL</code> - Satellite mask for the Galileo system <code>CFG-NAVMASK-SV_MASK_BDS</code> - Satellite mask for the BeiDou system <code>CFG-NAVMASK-SV_MASK_QZSS</code> - Satellite mask for the QZSS system <code>CFG-NAVMASK-SV_MASK_NAVIC</code> - Satellite mask for the NavIC system</p> <p>CFG-HW-RF_LNA_MODE Sets the gain mode of the chip internal LNA for the L1 and L5 band independently of each other</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#usb-programming","title":"USB Programming","text":"<p>The USB connection is utilized for configuration and communication with the ZED-X20P GNSS module. Users only need to connect their ZED-X20P GNSS breakout board to a computer using a USB-C cable.</p> <p></p> <p>The ZED-X20P GNSS breakout board with a USB-C cable attached.</p>"},{"location":"hardware_assembly/#external-antenna","title":"External Antenna","text":"<p>In order to receive GNSS signals, users will need to connect a compatible antenna.</p> <p></p> <p>Attaching a GNSS antenna to the SMA connector on the ZED-X20P GNSS breakout board.</p> <p>Tip</p> <p>For the best performance, we recommend users choose a compatible L1/L2/L5/L-band GNSS antenna and utilize a low-loss cable. Also, don't forget that GNSS signals are fairly weak and can't penetrate buildings or dense vegetation. The GNSS antenna should have an unobstructed view of the sky.</p>"},{"location":"hardware_assembly/#ufl-connector","title":"U.FL Connector","text":"<p>Users have the option of utilizing the U.FL connector to attach an external GNSS antenna. An external antenna can be connected to the U.FL connector on the board with an U.FL to SMA adapter cable. In order to utilize the U.FL connector, the <code>RF</code> jumper must be modified to change the signal path.</p> Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <p></p> <p>Connecting an external antenna to U.FL connector on the ZED-X20P GNSS breakout board.</p> <p></p> <p>Cutting and soldering the <code>RF</code> jumper on the ZED-X20P GNSS breakout board, to utilize the GNSS antenna attached to the U.FL connector.</p>"},{"location":"hardware_assembly/#breakout-pins","title":"Breakout Pins","text":"<p>The PTH pins on the ZED-X20P GNSS breakout board are broken out into 0.1\"-spaced pins on the outer edges of the board.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <p>Headers</p> <p>When selecting headers, be sure you are aware of the functionality you require.</p> <p></p> <p>Soldering headers to the ZED-X20P GNSS breakout board.</p> <p>Hookup Wires</p> <p>For a more permanent connection, users can solder wires directly to the board.</p> <p></p> <p>Soldering wires to the ZED-X20P GNSS breakout board.</p>"},{"location":"hardware_assembly/#bluesmirf-header-pins","title":"BlueSMiRF Header Pins","text":"<p>One of the three sets of PTH pins on the ZED-X20P GNSS breakout board is labeled <code>BlueSMiRF</code>. This set of header pins breaks out the <code>UART2</code> interface of the ZED-X20P module, which can be connected to a microcontroller or RF transceiver; such as the BlueSMiRF v2, Bluetooth<sup>\u00ae</sup> serial link. The BlueSMiRF v2 comes in two variations, with PTH pins or male header pins. Users can directly solder the PTH variant to the board with male headers, for a more permanent installation; otherwise, for more flexibility, a stackable header can be utilized.</p> <p></p> <p>Connecting the BlueSMiRF serial link with a stackable header to the ZED-X20P GNSS breakout board.</p> <p></p> <p>Connecting the BlueSMiRF serial link in a more compact orientation.</p> <p>Default Settings</p> <ul> <li>Baudrate: 38400bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> </ul> <p>When connecting the ZED-X20P GNSS breakout board to another device, users need to be aware of the pin connections and voltage ranges of the products. Below, is a table of the pin connections that users can reference.</p> Pin Number 1 (Left Side) 2 3 4 5 6 (Right) Label <code>NC</code> <code>TXD</code> <code>RXD</code> <code>3V3</code> <code>NC</code> <code>GND</code> Function UART - Transmit UART - Receive Output Voltage: 3.3V Ground"},{"location":"hardware_assembly/#jst-connector","title":"JST Connector","text":"<p>The <code>BlueSMiRF</code> header pins and JST connector, both break out the <code>UART2</code> interface of the ZED-X20P module. The JST connector can be used to attach to the SiK Telemetry Radio V3 for RTK corrections.</p> <p></p> <p>Connecting the SiK Telemetry Radio V3 to the ZED-X20P GNSS breakout board.</p> <p></p> <p>Operating the ZED-X20P GNSS breakout board as an RTK base station, transmitting RTK corrections with the SiK Telemetry Radio V3.</p> <p>Default Settings</p> <ul> <li>Baudrate: 38400bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> </ul> <p>When connecting the ZED-X20P GNSS breakout board to another device, users need to be aware of the pin connections and voltage ranges of the products. Below, is a table of the pin connections that users can reference.</p> Pin Number 1 (Left Side) 2 3 4 (Right) Label <code>3V3</code> <code>TXD</code> <code>RXD</code> <code>GND</code> Function Output Voltage: 3.3V UART - Transmit UART - Receive Ground"},{"location":"hardware_assembly/#qwiic-devices","title":"Qwiic Devices","text":"<p>The Qwiic system allows users to effortlessly prototype with a Qwiic compatible I<sup>2</sup>C device without soldering. Users can attach ZED-X20P GNSS breakout board along with other Qwiic sensors or boards to any Qwiic compatible microcontroller, with just a few Qwiic cables. (*The example below, is for demonstration purposes and is not pertinent to the board functionality or this tutorial.)</p> <p></p> <p>Several Qwiic devices and microcontroller connected to the ZED-X20P GNSS breakout board.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#design-files","title":"Design Files","text":"<ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> <li> Board Dimensions:<ul> <li>1.70\" x 1.70\" (43.2mm x 43.2mm)</li> </ul> </li> </ul> </li> <li> 3D ModelDimensions <p> <p>Download the <code>*.step</code> File</p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p> Dimensions of the ZED-X20P GNSS breakout board. </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"hardware_overview/#board-layout","title":"Board Layout","text":"<p>The SparkFun Allband GNSS RTK Breakout - ZED-X20P (Qwiic) features the following:</p> <p></p> <p>Layout of the major components on the breakout board.</p> <ol> <li> USB-C Connector The primary inteface for powering and interacting with the board </li> <li> ZED-X20P GNSS Module The u-blox ZED-X20P GNSS module </li> <li> Header Pins Exposes pins to power the board and breaks out the interfaces of the ZED-X20P GNSS module </li> <li> BlueSMiRF Header Pins Exposes the <code>UART2</code> interface of the ZED-X20P GNSS module </li> <li> JST Connector Exposes the <code>UART2</code> interface of the ZED-X20P GNSS module </li> <li> Qwiic Connectors Exposes the I<sup>2</sup>C interface of the ZED-X20P GNSS module </li> <li> Status LEDs LED status indicators for the ZED-X20P GNSS module </li> <li> <code>Antenna L1/2/5/6</code> RF Connectors SMA and U.FL (optional) connectors for an external GNSS antenna </li> </ol>"},{"location":"hardware_overview/#usb-c-connector","title":"USB-C Connector","text":"<p>A USB connector is provided to power the board and interface with the ZED-X20P GNSS receiver. For most users, it will be the primary method for communicating with the ZED-X20P module.</p> <p></p> <p>USB-C connector on the ZED-X20P GNSS breakout board.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The simplest method to power the board is through the USB-C connector. However, the ZED-X20P GNSS breakout board only requires 3.3V to power most of its components(1), which can be supplied though JST connector, Qwiic connector, or PTH pins.</p> <ol> <li>5V is only required to utilize the USB interface; and when enabled, it can also power the JST connector.</li> </ol> <p></p> <p>ZED-X20P GNSS breakout board's power connections.</p> <p>Below, is a general summary of the power circuitry on the board; most are broken out as PTH pins:</p> <ul> <li><code>VIN</code> - The voltage from the USB-C connector, usually 5V.<ul> <li>Input Voltage Range: 1.2 - 5.5V (1)</li> <li>Power source for the entire board<ul> <li>Powers the 3.3V voltage regulator (RT9080), which can source up to 600mA</li> <li>When enabled, it can also power the BlueSMiRF header</li> </ul> </li> </ul> </li> <li><code>3V3</code> - Provides a regulated 3.3V from the RT9080, using the power supplied from the <code>VIN</code> pin or USB-C connector.<ul> <li>Used to power the ZED-X20P module, LEDs, Qwiic connectors, BlueSMiRF header, and backup battery</li> <li>Controlled by the <code>EN</code> pin, which is enabled by default</li> </ul> </li> <li><code>EN</code> - Enables the voltage output from the RT9080, 3.3V voltage regulator<ul> <li>Enabled by default (active <code>HIGH</code>)</li> </ul> </li> <li><code>RST</code> - Used to reset the ZED-X20P GNSS module<ul> <li>Connected to the <code>RESET_N</code> pin of the ZED-X20P module, an input-only pin with an internal pull-up resistor (2)</li> <li>Driving the pin <code>LOW</code> for at least 1ms triggers a cold-start reset, clearing the <code>BBR</code> content (receiver configuration, real-time clock (RTC), and GNSS orbit data)</li> </ul> </li> <li><code>GND</code> - The common ground or the 0V reference for the voltage supplies.</li> <li>Backup Battery - Provides backup power to the ZED-X20P GNSS module to maintain ephemeris data for warm starts</li> </ul> <ol> <li> <p>While the RT9080 LDO regulator has an input voltage range of 1.2 - 5.5V, a minimum supply voltage of 3.5V is recommended for a 3.3V output.</p> </li> <li> <p>No capacitors should be placed between <code>RESET_N</code> to GND, otherwise it could trigger a reset on every startup.</p> </li> </ol> <p>JST Connector</p> <p>The <code>VSEL</code> pin of the BlueSMiRF header is designed to operate as a voltage output. However, an input voltage can be supplied through the pin, but users should be mindful of any voltage contention issues.</p> <p>Additionally, the jumper for the <code>VSEL</code> pin can be modified to change to output voltage level.</p> <p>Info</p> <p>For more details, users can reference the schematic and the datasheets of the individual components on the board.</p>"},{"location":"hardware_overview/#power-consumption","title":"Power Consumption","text":"<p>The power consumption of the ZED-X20P module depends on the GNSS signals enabled and if the module is acquiring or tacking those signals. The table below, lists the average current consumption with a supply voltage of 3.3V.</p> GNSS Signals Acquisition Tracking GPS+GAL+BDS 75mA 70mA GPS 50mA 50mA <p>Tip</p> <p>During acquisition, the current consumption may reach up to 85mA; make sure the primary power source can sustain this.</p> <p>Info</p> <p>For more information, please refer to the ZED-X20P Datasheet.</p>"},{"location":"hardware_overview/#zed-x20p-gnss-receiver","title":"ZED-X20P GNSS Receiver","text":"<p>The centerpiece of this GNSS breakout board is the ZED-X20P module from u-blox; it features their latest X20 GNSS engine, a successor to their popular F9 engine. The ZED-X20P module is an all-band, high precision GNSS receiver that concurrently processes signals from the GPS, Galileo, BeiDou, QZSS, and NavIC constellations across all GNSS frequency bands, including L-band. With positioning algorithms for Real-time Kinematics (RTK), PPP-RTK, and Precise Point Positioning* (PPP) technologies, the module supports standard RTCM corrections for Virtual Reference Stations (VRS) in a Network RTK setup or a local base station setup. Additionally, L-band correction services are natively supported without the need to integrate an external receiver, such as the NEO-D9S.</p> <p>With its very high update rate, the ZED-X20P module is ideal for control applications, ensuring smooth and reliable operation. The module also protects system integrity with multi-layered defenses, including a Root of Trust, jamming and spoofing detection, cryptographic authentication of navigation messages through Galileo OSNMA, and more. The module also accommodates users with a diverse choice of interfaces including USB, UART, SPI, and I<sup>2</sup>C.</p> <p>Note</p> <p><code>*</code>: Feature in development</p> <p></p> <p>The ZED-X20P module on the breakout board.</p> <p></p> <p></p> <p>The frequency bands supported by the various u-blox GNSS engines.</p> <p>Features:</p> <ul> <li>Supply voltage: 2.7V to 3.6V</li> <li>GNSS Constellations:<ul> <li>GPS (USA)</li> <li>Galileo (EU)</li> <li>BDS (China)</li> <li>QZSS (Japan)</li> <li>NavIC (India)</li> </ul> </li> <li>SBAS Systems:<ul> <li>WASS (USA)</li> <li>EGNOS (EU)</li> <li>BDSBAS (China)</li> <li>MSAS (Japan)</li> <li>GAGAN (India)</li> </ul> </li> <li>Sensitivity<ul> <li>Tracking and Nav.: -167dBm</li> <li>Reacquisition: -160dBm</li> <li>Cold start: -148dBm</li> <li>Hot start: -157dBm</li> </ul> </li> <li>Accuracy<ul> <li>Dynamic<ul> <li>Velocity: 0.05m/s</li> <li>Heading: 0.3\u00b0</li> </ul> </li> <li>Static/Position (GPS+GAL+BDS)<ul> <li>Horizontal position accuracy (CEP)<ul> <li>PVT: 1.2m</li> <li>SBAS: 0.6m</li> <li>RTK: 0.01m + 1ppm</li> <li>SPARTN: &lt;0.06m</li> </ul> </li> <li>Vertical position accuracy (Median)<ul> <li>PVT: 2.0m</li> <li>SBAS: 1.0m</li> <li>RTK: 0.01m + 1ppm</li> <li>SPARTN: &lt;0.10 m</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li>Operational limits<ul> <li>Dynamics: &lt;4g</li> <li>Altitude: 80,000m</li> <li>Velocity: 500m/s</li> <li>Update Rate: Up to 25Hz</li> </ul> </li> <li>Time to Fix<ul> <li>Cold Start: &lt; 27s</li> <li>Aided Start: &lt; 2s</li> <li>Hot Start: 2s</li> </ul> </li> <li>Convergence time:<ul> <li>RTK: &lt; 10s</li> <li>SPARTN: &lt; 50s</li> </ul> </li> <li>Features<ul> <li>Programmable flash memory</li> <li>Carrier phase output</li> <li>Jamming detection</li> <li>Galileo OSNMA</li> <li>Secure boot</li> </ul> </li> <li>Interfaces:<ul> <li>USB</li> <li>UART x2</li> <li>SPI</li> <li>I<sup>2</sup>C</li> <li>Digital I/O<ul> <li><code>TIMEPULSE</code> configurable: 0.25 - 10MHz</li> <li><code>EXTINT</code> input for Wakeup</li> </ul> </li> </ul> </li> <li>Services:<ul> <li>AssistNow</li> <li>PointPerfect</li> </ul> </li> <li>Operating temperature: -40\u00b0C to 85\u00b0C</li> <li>Dimensions: 17.0mm x 22.0mm x 2.4mm</li> </ul>"},{"location":"hardware_overview/#frequency-bands","title":"Frequency Bands","text":"<p>The ZED-X20P module is an all-band, high precision GNSS receiver that concurrently processes signals from the GPS, Galileo, BeiDou, QZSS, and NavIC constellations across all GNSS frequency bands, including L-band. Below, are the frequency bands provided by all the global navigation satellite systems and the ones supported by the ZED-X20P module.</p> <p></p> <p>The frequency bands supported by the ZED-X20P GNSS receiver.</p> Constellation Frequency Bands GPS L1C/A, L2C, L5 QZSS L1C/A, L1C/B*, L2C, L5, L6 GAL E1B/C, E5a, E6 BDS B1I, B1C, B2a, B3I NavIC L1*, L5 SBAS L1C/A <p>The supported frequency bands, organized by constellation.</p> <p>Note</p> <p><code>*</code>: Feature in development</p> <p></p> <p>Frequency bands of the global navigation satellite systems. (Source: Tallysman)</p> <p>Configuration Settings</p> <p>Each GNSS constellations and their signal bands can be enabled or disabled independently, using keys from the <code>CFG-SIGNAL-*</code> configuration group; except for the QZSS and SBAS constellation. A GNSS constellation is considered to be enabled when the constellation enable key is set and at least one of the constellation's band keys is enabled. However, the ZED-X20P only supports certain combinations of constellations and bands. For all GNSS constellations, the <code>L1</code> band is mandatory even in combination with another frequency band. Any unsupported combinations will be rejected with a <code>UBX-ACK-NAK</code> and the warning: <code>inv sig cfg</code> will be sent via UBX-INF and NMEA-TXT messages (if enabled).</p> Supported Combinations Constellation key<code>CFG-SIGNAL-GAL_ENA</code> Band key<code>CFG-SIGNAL-GAL_E1_ENA</code> Band key<code>CFG-SIGNAL-GAL_E5A_ENA</code> Band key<code>CFG-SIGNAL-GAL_E6_ENA</code> Constellation enabled? true (<code>1</code>) true (<code>1</code>) true (<code>1</code>) true (<code>1</code>) yes true (<code>1</code>) true (<code>1</code>) true (<code>1</code>) false (<code>0</code>) yes true (<code>1</code>) true (<code>1</code>) false (<code>0</code>) true (<code>1</code>) yes true (<code>1</code>) true (<code>1</code>) false (<code>0</code>) false (<code>0</code>) yes true (<code>1</code>) false (<code>0</code>) true (<code>1</code>) true (<code>1</code>) no true (<code>1</code>) false (<code>0</code>) false (<code>0</code>) true (<code>1</code>) no true (<code>1</code>) false (<code>0</code>) true (<code>1</code>) false (<code>0</code>) no true (<code>1</code>) false (<code>0</code>) false (<code>0</code>) false (<code>0</code>) no false (<code>0</code>) true (<code>1</code>) true (<code>1</code>) true (<code>1</code>) no false (<code>0</code>) true (<code>1</code>) true (<code>1</code>) false (<code>0</code>) no false (<code>0</code>) true (<code>1</code>) false (<code>0</code>) true (<code>1</code>) no false (<code>0</code>) false (<code>0</code>) true (<code>1</code>) true (<code>1</code>) no false (<code>0</code>) false (<code>0</code>) false (<code>0</code>) true (<code>1</code>) no false (<code>0</code>) false (<code>0</code>) true (<code>1</code>) false (<code>0</code>) no false (<code>0</code>) true (<code>1</code>) false (<code>0</code>) false (<code>0</code>) no false (<code>0</code>) false (<code>0</code>) false (<code>0</code>) false (<code>0</code>) no What are Frequency Bands? <p>A frequency band is a section of the electromagnetic spectrum, usually denoted by the range of its upper and lower limits. In the radio spectrum, these frequency bands are usually regulated by region, often through a government entity. This regulation prevents the interference of RF communication; and often includes major penalties for any interference with critical infrastructure systems and emergency services.</p> <p> Frequency bands of the global navigation satellite systems. (Source: ESA) </p> <p>However, if the various GNSS constellations share similar frequency bands, then how do they avoid interfering with one another? Without going too far into detail, the image above illustrates the frequency bands of each system with a few characteristics specific to their signals. Wit these characteristics in mind, along with other factors, the chart can help users to visualize how multiple GNSS constellations might co-exist with each other.</p> <p>For more information, users may find these articles of interest:</p> <ul> <li>GNSS signal</li> <li>GPS Signal Plan</li> <li>GLONASS Signal Plan</li> <li>GALILEO Signal Plan</li> </ul>"},{"location":"hardware_overview/#peripherals-and-io-pins","title":"Peripherals and I/O Pins","text":"<p>The ZED-X20P module has twenty-one I/O pins, of which eight are programmable. Most of these are broken out as PTH pins on the ZED-X20P GNSS breakout board; whereas, others are broken out to their specific interface (i.e. USB connector, jumper, U.FL connector, etc.). Additionally, some of the I/O connections are broken out with multiple components or interfaces.</p> <p></p> <p>The header pins on the ZED-X20P GNSS breakout board.</p> <p>Interfaces:</p> <ul> <li>USB</li> <li>UART x2</li> <li>SPI</li> <li>I<sup>2</sup>C<ul> <li>Address (7-bit): 0x42 (<code>1000010</code>)</li> </ul> </li> <li>1x Antenna Detect (1)</li> <li>1x Antenna Short (2)</li> <li>1x Antenna Off (3)</li> <li>1x External interrupt</li> <li>1x PPS output signal</li> <li>1x TX Ready</li> <li>1x RTK Stat</li> <li>1x Geo Stat</li> <li>1x D_Sel pin</li> <li>1x Safe boot pin</li> <li>1x Reset pin</li> </ul> <ol> <li>Not available on the ZED-X20P GNSS breakout board.</li> <li>Not available on the ZED-X20P GNSS breakout board.</li> <li>Not available on the ZED-X20P GNSS breakout board.</li> </ol> UART InterfaceI<sup>2</sup>CSPIPIO Pins <p>The ZED-X20P has two UART interfaces that can be accessed either through the PTH pins. The <code>UART2</code> interface can also be accessed through the BlueSMiRF header and the JST connector.</p> <p> The UART interfaces on the ZED-X20P GNSS breakout board. </p> <p>Warning</p> <p>Firmware updates can only be performed with the <code>UART1</code> interface.</p> <p>Tip</p> <p>The UART <code>RX</code> interface will be disabled when more than 100 frame errors are detected during a one-second period. This can happen if the wrong baud rate is used or the UART <code>RX</code> pin is grounded. An error message appears when the UART <code>RX</code> interface is reenabled at the end of the one-second period.</p> <p>Supported Protocols</p> <p>The UART interface supports the following protocols:</p> <ul> <li>Input messages: NMEA (GGA, GLL, GSA, GSV, RMC, VTG, and TXT), RTCM, SPARTN, and UBX</li> <li>Output messages: NMEA, RTCM, and UBX</li> </ul> <p>Configuration Settings</p> <p>The UART interfaces can be configured with the <code>CFG-UART*</code> messages, but will initially have the following settings: </p> <ul> <li>Baudrate: 4800 to 8000000bps (Default: 38400bps)</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <ul> <li><code>UART1</code> Output<ul> <li>NMEA protocol with GGA, GLL, GSA, GSV, RMC, VTG, TXT messages are output by default.</li> <li>UBX and RTCM 3.4 protocols are enabled by default, but no output messages are enabled by default.</li> </ul> </li> <li><code>UART1</code> Input<ul> <li>UBX, NMEA and RTCM 3.4 input protocols are enabled by default.</li> </ul> </li> <li><code>UART2</code> Output<ul> <li>RTCM 3.4 protocol is enabled by default, but no output messages are enabled by default.</li> <li>NMEA protocol is disabled by default.</li> </ul> </li> <li><code>UART2</code> Input<ul> <li>NMEA, RTCM 3.4, and SPARTN protocols are enabled by default.</li> </ul> </li> </ul> <p>The ZED-X20P has a single I<sup>2</sup>C interface that can be accessed either through the PTH pins or the Qwiic connector.</p> <p> The I<sup>2</sup>C connections on the ZED-X20P GNSS breakout board. </p> <p>Info</p> <p>For users interested in the specific details about the read and write access for th I<sup>2</sup>C bus, please refer to the ZED-X20P integration manual</p> What is Qwiic? <p> </p> <p>The Qwiic connect system is a solderless, polarized connection system that allows users to seamlessly daisy chain I<sup>2</sup>C boards together. Play the video below to learn more about the Qwiic connect system or click on the banner above to learn more about Qwiic products.</p> <p> </p> <p>Features of the Qwiic System</p> No SolderingPolarized ConnectorDaisy Chain-able <p> </p> <p>Qwiic cables (4-pin JST) plug easily from development boards to sensors, shields, accessory boards and more, making easy work of setting up a new prototype.</p> <p> </p> <p>There's no need to worry about accidentally swapping the SDA and SCL wires on your breadboard. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time, right from the start.</p> <p>The PCB connector is part number SM04B-SRSS (Datasheet) or equivalent. The mating connector used on cables is part number SHR04V-S-B or an equivalent (1mm pitch, 4-pin JST connector).</p> <p> </p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them, allowing multiple devices to be connected.</p> <p> The SPI pins on the ZED-X20P GNSS breakout board. </p> <p>The ZED-X20P has a single SPI interface that can be accessed through the PTH pins. To enable the SPI interface, users must modify the <code>SPI</code> jumper.</p> Labels SPI Pins TX1 SDO RX1 SDI SDA CS SCL CLK <p>The ZED-X20P module features five programmable I/O pins, but the LNA enable pin is not broken out on this board. All the inputs have internal pull-up resistors in normal operation and can be left open if unused.</p> <p>LED Indicators</p> <p>The <code>PPS</code>, <code>RTK</code>, and <code>FENCE</code> programmable I/O pins are also used as LED indicators.</p> <p> The signal pins for the LED indicators on the ZED-X20P GNSS breakout board. </p> <p>Disable LEDs</p> <p>There are jumper attached to the LEDs of the <code>PPS</code>, <code>RTK</code>, and <code>FENCE</code> pins. For low power applications, users can cut the jumper to disable the LED.</p> <ul> <li> <code>FENCE</code> <p>The <code>GEOFENCE_STAT</code> signal indicates the current geofence status as to whether the receiver is inside any of the active areas. It is possible to configure up to four circular areas as geofence locations. Once configured, the receiver continuously compares its current position with the preset geofenced areas.</p> <p>The receiver toggles the assigned pin according to the combined geofence state.</p> <ul> <li>Inside - The position is inside the geofence with the configured confidence level</li> <li>Outside - The position lies outside of the geofence with the configured confidence level</li> <li>Unknown - There is no valid position solution or the position uncertainty does not allow for unambiguous state evaluation</li> </ul> <p>Pin State</p> <ul> <li><code>HIGH</code> - The <code>GEOFENCE_STAT</code> pin is always set to high level when the combined geofence state is unknown</li> <li><code>Low</code> - A low level can represent either an inside or outside state based upon the <code>CFG-GEOFENCE-PINPOL</code> configuration</li> </ul> </li> <li> <code>RTK</code> <p>The <code>RTK_STAT</code> signal indicates the RTK positioning status and if a stream of valid correction messages is being received.</p> <p>Pin State</p> <ul> <li><code>LOW</code> - Indicates that RTK fixed mode has been achieved</li> <li>Blinking - Indicates that a valid stream of correction messages is being received and utilized, but no RTK fixed mode has been achieved</li> <li><code>HIGH</code> - Indicates that no carrier phase solution is available</li> </ul> </li> <li> <code>PPS</code> The <code>PPS</code> pin is connected to the module's time pulse (<code>TIMEPULSE</code>) signal and the <code>PPS</code> LED, as a visual indicator. The period, length, and polarity (rising or falling edge) of the <code>TIMEPULSE</code> signal can be configured with the <code>CFG-TP-*</code> messages. </li> </ul> <p> The <code>EVENT</code> pin on the ZED-X20P GNSS breakout board. </p> <ul> <li> <code>EVENT</code> ZED-X20P supports external interrupts through its <code>EXTINT</code> pin. This is useful for waking the module up from its standby mode or for timing applications. </li> </ul> <p> The <code>RST</code> pin on the ZED-X20P GNSS breakout board. </p> <ul> <li> <code>RST</code> <p>The <code>RST</code>pin is connected to the <code>RESET_N</code> pin of the ZED-X20P module. Driving the pin <code>LOW</code> for at least 1ms triggers a cold-start reset, clearing the <code>BBR</code> content (receiver configuration, real-time clock (RTC), and GNSS orbit data).</p> <p>Info</p> <p>Capacitors should not be placed between <code>RST</code> and <code>GND</code>; otherwise, it could trigger a reset on startup.</p> </li> <li> <code>D_SEL</code> <p>The <code>D_SEL</code> pin can be used to configure the functionality of the combined <code>UART1</code>, I<sup>2</sup>C, and SPI interfaces. It is available as the <code>SPI</code> jumper on the back of the board.</p> <p>Info</p> <p>When pulled <code>LOW</code> (by closing the jumper), the <code>D_SEL</code> enables the SPI interface on the <code>UART1</code> and I<sup>2</sup>C pins.</p> </li> </ul> <p>Note</p> <p>The <code>SAFEBOOT_N</code> test point is for updates and reconfiguration. The ZED-X20P module will enter safeboot mode, if this pin is pulled <code>LOW</code> at starup.</p> <p>The <code>SAFEBOOT_N</code> and <code>TIMEPULSE</code> (<code>PPS</code>) pins are internally connected in the ZED-X20P module, by a 1 k\u03a9 series resistor. Make sure these pins have no load that could pull them low at startup; otherwise, the receiver will enter its safeboot mode.</p>"},{"location":"hardware_overview/#bluesmirf-header","title":"BlueSMiRF Header","text":"<p>The <code>UART2</code> interface of the ZED-X20P can be accessed either through the BlueSMiRF header pins or the JST connector. The BlueSMiRF header can be used to connect the ZED-X20P GNSS module to external devices, such as a microcontroller or BlueSMiRF v2, Bluetooth<sup>\u00ae</sup> serial link.</p> <p></p> <p>The BlueSMiRF header pins on the ZED-X20P GNSS breakout board.</p> <p>Supported Protocols</p> <p>The UART interface supports the following protocols:</p> <ul> <li>Input messages: NMEA and UBX</li> <li>Output messages: NMEA (GGA, GLL, GSA, GSV, RMC, VTG, and TXT)</li> </ul> <p>Configuration Settings</p> <p>The UART interface can be configured with the <code>CFG-UART2-*</code> messages, but will initially have the following settings:</p> <ul> <li>Baudrate: 9600 to 921600bps (Default: 38400bps)</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>Bus Contention</p> <p>To avoid bus contention issues between the BlueSMiRF header pins or the JST connector; make sure only one devices is connected to either of these connection options.</p> <p>Pin Connections</p> <p>When connecting the ZED-X20P GNSS breakout board to another device, users need to be aware of the pin connections and voltage ranges of the products. Below, is a table of the pin connections for the BlueSMiRF header pins on the ZED-X20P GNSS breakout board.</p> <p> Pin Number 1 (Left Side) 2 3 4 5 6 (Right) Label <code>NC</code> <code>TXD</code> <code>RXD</code> <code>3V3</code> <code>NC</code> <code>GND</code> Function UART - Transmit UART - Receive Output Voltage: 3.3V Ground </p>"},{"location":"hardware_overview/#jst-connector","title":"JST Connector","text":"<p>The <code>UART2</code> interface of the ZED-X20P can be accessed either through the BlueSMiRF header pins or the JST connector. The JST connector can be used to connect the ZED-X20P GNSS module to external devices, such as the SiK Telemetry Radio V3 for RTK corrections.</p> <p></p> <p>The JST connector on the ZED-X20P GNSS breakout board.</p> <p>Supported Protocols</p> <p>The UART interface supports the following protocols:</p> <ul> <li>Input messages: NMEA and UBX</li> <li>Output messages: NMEA (GGA, GLL, GSA, GSV, RMC, VTG, and TXT)</li> </ul> <p>Configuration Settings</p> <p>The UART interface can be configured with the <code>CFG-UART2-*</code> messages, but will initially have the following settings:</p> <ul> <li>Baudrate: 9600 to 921600bps (Default: 38400bps)</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>Bus Contention</p> <p>To avoid bus contention issues between the BlueSMiRF header pins or the JST connector; make sure only one devices is connected to either of these connection options.</p> <p>Pin Connections</p> <p>When connecting the ZED-X20P GNSS breakout board to another device, users need to be aware of the pin connections and voltage ranges of the products. Below, is a table of the pin connections for the JST connector on the ZED-X20P GNSS breakout board.</p> <p> Pin Number 1 (Left Side) 2 3 4 (Right) Label <code>3V3</code> <code>TXD</code> <code>RXD</code> <code>GND</code> Function Output Voltage: 3.3V UART - Transmit UART - Receive Ground </p>"},{"location":"hardware_overview/#external-antenna","title":"External Antenna","text":"<p>The ZED-X20P GNSS breakout board has two options for connecting an external GNSS antenna; the U.FL and SMA connectors. By default, the SMA connector is the primary interface. In order to utilize the U.FL connector, the <code>RF</code> jumper must be modified to redirect the signal path from the SMA connector. Then, an external antenna can be connected to the U.FL connector on the board with an U.FL to SMA adapter cable.</p> <p></p> <p>The RF connections to attach an external GNSS antenna to the ZED-X20P GNSS breakout board.</p> <p></p> <p>The <code>RF</code> jumper that needs to be modified to utilize the U.FL connector.</p> <p>Tip</p> <p>For the best performance, we recommend users choose a compatible L1/L5 GNSS antenna and utilize a low-loss cable. Also, don't forget that GNSS signals are fairly weak and can't penetrate buildings or dense vegetation. The GNSS antenna should have an unobstructed view of the sky.</p>"},{"location":"hardware_overview/#status-leds","title":"Status LEDs","text":"<p>The status indicator LEDs on the ZED-X20P GNSS breakout board.</p> <p>There are two status LEDs on the ZED-X20P GNSS breakout board:</p> <ul> <li><code>PWR</code> - Power (Red)<ul> <li>Turns on once 3.3V power is supplied to the board</li> </ul> </li> <li><code>PPS</code> - Pulse-Per-Second (Yellow)<ul> <li>Indicates when there is a time pulse signal (see the PPS Output section)</li> </ul> </li> <li> <p><code>RTK</code> - RTK correction indicator (White)</p> LED Status <ul> <li>On - Indicates that no carrier phase solution is available</li> <li>Blinking - Indicates that a valid stream of correction messages is being received and utilized, but no RTK fixed mode has been achieved</li> <li>Off - Indicates that RTK fixed mode has been achieved</li> </ul> </li> <li> <p><code>FENCE</code> - Geofence status indicator (Blue)</p> LED Status <ul> <li>On - The <code>GEOFENCE_STAT</code> pin is always set to high level when the combined geofence state is unknown</li> <li>Off - A low level can represent either an inside or outside state based upon the <code>CFG-GEOFENCE-PINPOL</code> configuration</li> </ul> </li> </ul> <p>Info</p> <p>For low power applications, the LEDs can be disabled to conserve energy. See the Jumpers section.</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <p>There are eight jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <p></p> <p>The jumpers on the bottom of the ZED-X20P GNSS breakout board.</p> LED Jumpers <p>Four of the jumpers control power to the status LEDs on the board.</p> <p>Info</p> <p>By default, all the jumpers are connected, to power the status LEDs. For low power applications, users can cut the jumpers to disconnect power from each of the LEDs.</p> <ul> <li><code>PWR</code> - This jumper can be cut to remove power from the red, power LED.</li> <li><code>PPS</code> - This jumper can be cut to remove power from the yellow, <code>PPS</code> LED that is provided by the <code>PPS</code> signal.</li> <li><code>RTK</code> - This jumper can be cut to remove power from the white, RTK correction LED.</li> <li><code>FENCE</code> - This jumper can be cut to remove power from the blue, Geofence status LED.</li> </ul> <code>I<sup>2</sup>C</code> This jumper can be be modified to connect pull-up resistors to the <code>SCL</code> and <code>SDA</code> connections of the I<sup>2</sup>C interface. <code>SPI</code> This jumper is connected to the <code>D_SEL</code> pin and can be modified to enable the SPI interface on the <code>RX</code>, <code>TX</code>, <code>SDA</code>, and <code>SCL</code> pins. <code>VSEL</code> This jumper can be modified to configure/disconnect the <code>VCC</code> pin of the 4-pin locking JST connector to/from <code>3V3</code> or <code>5V</code> power. <code>SHLD</code> This jumper can be cut to disconnect the shield of the USB-C connector from the board's ground plane."},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<ul> <li> <p> Allband GNSS RTK Breakout - ZED-X20P (Qwiic) SKU: GPS-28871 <p> </p> <p> Purchase from SparkFun  </p> <li> <p>The SparkFun All-band GNSS RTK Breakout - ZED-X20P (Qwiic) features the latest GNSS engine from u-blox; the X20, which is a successor to their popular F9 engine. This board's dimensions, pin layout, and connectors are very similar to the SparkFun GPS-RTK-SMA Breakout - ZED-F9P (Qwiic); and in most circumstances, can be used as a drop-in replacement. The board also accommodates users with a diverse choice of interfaces including USB, UART, SPI, and I<sup>2</sup>C.</p> <p>The ZED-X20P module is an all-band, high precision GNSS receiver that concurrently processes signals from the GPS, Galileo, BeiDou, QZSS, and NavIC constellations across all GNSS frequency bands, including L-band. With positioning algorithms for Real-time Kinematics (RTK), PPP-RTK, and Precise Point Positioning* (PPP) technologies, the module supports standard RTCM corrections for Virtual Reference Stations (VRS) in a Network RTK setup or a local base station setup. Additionally, L-band correction services are natively supported without the need to integrate an external receiver, such as the NEO-D9S.</p> <p>With its very high update rate, the ZED-X20P module is ideal for control applications, ensuring smooth and reliable operation. The module also protects system integrity with multi-layered defenses, including a Root of Trust, jamming and spoofing detection, cryptographic authentication of navigation messages through Galileo OSNMA, and more. This represents the highest level of integration in a single-chip receiver for the navigation and robotics markets; in unmanned autonomous vehicles (UAVs), guidance systems, and auto-steering applications.</p> <p>The ZED-X20P module is supported by the u-blox u-center 2 GNSS software for real-time performance analysis, receiver configuration, and data logging. The AssistNow Online, Offline, and Autonomous A-GNSS services can also be used with the module for faster satellite acquisition. Users can also interface with the GNSS module using NMEA 4.11 and UBX binary protocols.</p> <p>Note</p> <p>The USB interface does not fully comply with industry standards and is not suitable for production use. The USB 2.0 FS (full speed, 12 Mbit/s) interface can be used for host communication. Due to the hardware implementation, it may not be possible to certify the USB interface.</p> <p><code>*</code>: Feature in development</p> </li> Product Comparison <p>Below is a simple comparison table between our breakout board and Septentrio's development and evaluation kits:</p> <p> A comparison chart between the ZED-X20P and ZED-F9P GNSS modules. </p> <p> A comparison of the frequency bands supported by the various u-blox engines. </p> <p>In this guide we'll cover how to setup the ZED-X20P GNSS breakout board. To follow along with this tutorial, at a minimum, users will need the following items:</p> <ul> <li>Computer with an operating system (OS) that is compatible with all the software installation requirements</li> <li>USB 3.1 Cable A to C - 3 Foot - Used to interface with the ZED-X20P GNSS Breakout (1)</li> <li>SparkFun Allband GNSS RTK Breakout - ZED-X20P (Qwiic)</li> </ul> <ol> <li>If your computer doesn't have a USB-A slot, then choose an appropriate cable or adapter.</li> </ol> <ul> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>Allband GNSS RTK Breakout - ZED-X20P (Qwiic) GPS-28871</p>"},{"location":"introduction/#section-topics","title":"Section Topics","text":"<p>This guide is divided into three sections:</p> <ul> <li>The Quickstart Guide assumes a working knowledge of GNSS receiver, development boards, and the required software to program and/or configure them for your project's needs. It only covers basic hardware information and assembly instructions users would need to get started with this product.</li> <li>The Hardware section has two sub-sections that provide:<ul> <li>An overview of the board's design, major components, and interfaces. Refer to this page for information on the connectors, breakout pins, and jumpers.</li> <li>Assembly instructions for this product's interfaces.</li> </ul> </li> <li>The Software section has several sub-sections. The ZED-X20P module has numerous capabilities and a multitude of ways to configure and interface with them.</li> <li>In the Resources and Support sections, users can find the design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links on the Resources page. Lastly, the Troubleshooting Tips page includes helpful tips and instructions for how to receive technical support from SparkFun.</li> </ul>"},{"location":"l5_signal/","title":"GPS L5 Signal","text":""},{"location":"l5_signal/#health-status-configuration","title":"Health Status Configuration","text":"<p>The ZED-X20P supports GPS <code>L5</code> signals. Broadcasting of Civil Navigation (CNAV) messages on the <code>L5</code> signal began in April 2014. At the time of writing, the GPS <code>L5</code> signals remain pre-operational and they are set unhealthy until sufficient monitoring capability is established. To evaluate GPS <code>L5</code> signals before they become fully operational, the receiver can be configured to ignore the GPS <code>L5</code> health status by overriding it with the respective GPS <code>L1 C/A</code> signal status.</p> <ul> <li>Do not use unhealthy, pre-operational GPS <code>L5</code> signals for safety-of-life or other critical purposes. This is an operational issue concerning the satellites/space segment; not a limitation or specific configuration of u-blox products.</li> <li>Users who choose to ignore the GPS <code>L5</code> signal health status in their production system do so at their own risk and must be fully aware of the implications. The system should also include a mechanism to revert to the mode where the <code>L5</code> signal health status is respected.</li> </ul>"},{"location":"l5_signal/#enable-gps-l5-signal","title":"Enable GPS <code>L5</code> Signal","text":"<p>The receiver does not use unhealthy signals for navigation by default. To ignore the GPS <code>L5</code> signal health status and override it with the respective GPS <code>L1</code> signal health status, the following UBX binary strings can be used. To confirm that the above UBX messages are sent successfully to the receiver, check that a <code>UBX-ACK-ACK</code> message is received afterwards. The configuration can be stored in RAM, BBR (battery-backed RAM), and/or flash layers.</p> <ul> <li>Writing to RAM ensures the UBX messages are taken into use immediately.</li> <li>Writing to BBR allows the UBX message to be carried out at next power-on if battery backup is maintained.</li> <li>Writing to flash ensures the UBX message is taken into use at every startup until the firmware is replaced in flash.</li> </ul> Configuration layer Configuration string RAM <pre><code>B5 62 06 8A 09 00 00 01 00 00 01 00 32 10 01 DE ED\n</code></pre> BBR <pre><code>B5 62 06 8A 09 00 00 02 00 00 01 00 32 10 01 DF F5\n</code></pre> FLASH <pre><code>B5 62 06 8A 09 00 00 04 00 00 01 00 32 10 01 E1 05\n</code></pre> <p>Table 1: UBX binary string to override GPS <code>L5</code> signal health status with GPS L1 health status</p>"},{"location":"l5_signal/#disable-gps-l5-signal","title":"Disable GPS <code>L5</code> Signal","text":"<p>To revert back to the default configuration, send the configuration string given in Table 2. The device returns the <code>UBX-ACK-ACK</code> message if the configuration is sent successfully.</p> Configuration layer Configuration string RAM <pre><code>B5 62 06 8A 09 00 00 01 00 00 01 00 32 10 00 DD EC\n</code></pre> BBR <pre><code>B5 62 06 8A 09 00 00 02 00 00 01 00 32 10 00 DE F4\n</code></pre> FLASH <pre><code>B5 62 06 8A 09 00 00 04 00 00 01 00 32 10 00 E0 04\n</code></pre> <p>Table 2: UBX binary strings to revert the GPS <code>L5</code> signal health status monitoring to default</p>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#quick-start","title":"Quick Start","text":"<p>In this guide we'll cover how to setup the ZED-X20P GNSS breakout board. To follow along with this tutorial, at a minimum, users will need the following items:</p> <ul> <li>Computer with an operating system (OS) that is compatible with all the software installation requirements</li> <li>USB 3.1 Cable A to C - 3 Foot - Used to interface with the ZED-X20P GNSS Breakout (1)</li> <li>SparkFun Allband GNSS RTK Breakout - ZED-X20P (Qwiic)</li> </ul> <ol> <li>If your computer doesn't have a USB-A slot, then choose an appropriate cable or adapter.</li> </ol> <ul> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>Allband GNSS RTK Breakout - ZED-X20P (Qwiic) GPS-28871</p>"},{"location":"quick_start/#board-layout","title":"Board Layout","text":"<p>The SparkFun Allband GNSS RTK Breakout - ZED-X20P (Qwiic) features the following:</p> <p></p> <p>Layout of the major components on the breakout board.</p> <ol> <li> USB-C Connector The primary inteface for powering and interacting with the board </li> <li> ZED-X20P GNSS Module The u-blox ZED-X20P GNSS module </li> <li> Header Pins Exposes pins to power the board and breaks out the interfaces of the ZED-X20P GNSS module </li> <li> BlueSMiRF Header Pins Exposes the <code>UART2</code> interface of the ZED-X20P GNSS module </li> <li> JST Connector Exposes the <code>UART2</code> interface of the ZED-X20P GNSS module </li> <li> Qwiic Connectors Exposes the I<sup>2</sup>C interface of the ZED-X20P GNSS module </li> <li> Status LEDs LED status indicators for the ZED-X20P GNSS module </li> <li> <code>Antenna L1/2/5/6</code> RF Connectors SMA and U.FL (optional) connectors for an external GNSS antenna </li> </ol>"},{"location":"quick_start/#usb-programming","title":"USB Programming","text":"<p>The USB connection is utilized for configuration and communication with the ZED-X20P GNSS module. Users only need to connect their ZED-X20P GNSS breakout board to a computer using a USB-C cable.</p> <p></p> <p>The ZED-X20P GNSS breakout board with a USB-C cable attached.</p>"},{"location":"quick_start/#external-antenna","title":"External Antenna","text":"<p>In order to receive GNSS signals, users will need to connect a compatible antenna.</p> <p></p> <p>Attaching a GNSS antenna to the SMA connector on the ZED-X20P GNSS breakout board.</p> <p>Tip</p> <p>For the best performance, we recommend users choose a compatible L1/L2/L5/L-band GNSS antenna and utilize a low-loss cable. Also, don't forget that GNSS signals are fairly weak and can't penetrate buildings or dense vegetation. The GNSS antenna should have an unobstructed view of the sky.</p>"},{"location":"quick_start/#u-center-2-software","title":"u-center 2 Software","text":"<p>u-center 2 is u-blox's software application for configuration, evaluation, and debugging of u-blox GNSS receivers and services. The software provides a relatively, simple graphics user interface to assess and test u-blox GNSS modules for navigation and positioning performance. It also allows users to define or apply GNSS product configurations for specific use cases. Saving, restoring, or sharing configurations between different products is easy.</p>"},{"location":"quick_start/#installation","title":"Installation","text":"<p>Installation of the u-center 2 software is straight forward; simply, click on the button below to download the software. User should be aware that the first time the software accessed, they will need to either create or login to their existing u-blox account. If necessary, users can follow the video below or reference the user manual for more instructions.</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#product-resources","title":"Product Resources","text":"<ul> <li>SparkFun logo Product Page</li> <li> Design Files:<ul> <li> Board Dimensions</li> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>u-center 2 Software<ul> <li>u-center 2 User Manual</li> <li>Tutorials</li> </ul> </li> </ul> <ul> <li>Component Documentation<ul> <li>ZED-X20P<ul> <li> Datasheet</li> <li> Product Summary</li> <li> Integration Manual</li> <li> GPS L5 Configuration</li> <li>Firmware (HPG 2.00)<ul> <li> Firmware File</li> <li> Interface Manual</li> <li> Release Notes</li> </ul> </li> </ul> </li> <li> RT9080 Datasheet</li> <li> JST Connector Datasheet</li> </ul> </li> <li>Building a GNSS System</li> <li>Qwiic Info Page</li> <li> Hardware Repo</li> </ul>"},{"location":"resources/#additional-resources","title":"Additional Resources","text":"<ul> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"resources/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":"<p>u-blox also provides great resources for the ZED-X20P GNSS receiver module:</p> <ul> <li>ZED-X20P Product Page</li> <li> u-blox YouTube Channel<ul> <li> Playlist: u-center 2</li> </ul> </li> <li> Support Page</li> <li> Product Documentation<ul> <li> PNT Technologies</li> <li> High Precision Positioning</li> <li>u-center 2 Software<ul> <li>u-center 2 User Manual</li> <li>Tutorials</li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"software_overview/","title":"Software Overview","text":""},{"location":"software_overview/#u-center-2-software","title":"u-center 2 Software","text":"<p>u-center 2 is u-blox's software application for configuration, evaluation, and debugging of u-blox GNSS receivers and services. The software provides a relatively, simple graphics user interface to assess and test u-blox GNSS modules for navigation and positioning performance. It also allows users to define or apply GNSS product configurations for specific use cases. Saving, restoring, or sharing configurations between different products is easy.</p> <p></p> <ul> <li>Tutorials</li> <li>User Manual<ul> <li>Connecting to a Device</li> <li>Device Configuration</li> <li>Views<ul> <li>Basic Data</li> <li>Map</li> <li>Satellites</li> <li>Deviation Plot</li> </ul> </li> </ul> </li> </ul> <p>Firmware Updates</p> <p>Firmware updates can only be performed with the <code>UART1</code> interface of the ZED-X20P</p> <p>Product Compatibility</p> <p>Gen 10 and later u-blox GNSS modules</p>"},{"location":"software_overview/#installation","title":"Installation","text":"<p>Installation of the u-center 2 software is straight forward; simply, click on the button below to download the software. User should be aware that the first time the software accessed, they will need to either create or login to their existing u-blox account. If necessary, users can follow the video below or reference the user manual for more instructions.</p> <p></p> <p> Download the u-center 2 from u-blox</p> System Requirements <p>Operating Systems</p> <ul> <li>Windows 10 or 11</li> </ul> <p>User Account Required</p> <p>The first time that users access the software, they will need to either create or login to their existing u-blox account. This requires internet access to login through a web browser. Once the account has been verified, users will no longer need to login again; unless they log out from the u-center 2 software.</p>"},{"location":"software_overview/#video-tutorials","title":"Video Tutorials","text":"<p>Users should reference the user manual for more information on the u-center 2 software. However, we have also linked their webinar and some videos from their Youtube playlist on u-blox's u-center 2 software application.</p> <p></p> <p></p> <p></p>"},{"location":"software_overview/#pygpsclient","title":"PyGPSClient","text":"<p>As an alternative to u-center 2, we recommend PyGPSClient for users with computers that run on MacOS or Linux.</p> Resources <p>For additional information, users can refer to the following resources for the PyGPSClient software:</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"software_overview/#installation_1","title":"Installation","text":"<p>There are a variety of installation methods detailed in the GitHub repository's <code>README.md</code> file. However, we recommend utilizing the <code>pip</code> installation method.</p> <p>Installation Commands</p> <p>Depending on how Python is installed on the computer, one of the following commands should allow users to install the software.</p> <ul> <li> <pre><code>python3 -m pip install pygpsclient\n</code></pre> </li> <li> <pre><code>pip install pygpsclient\n</code></pre> </li> </ul> System Requirements <p>This installation method requires an internet connection. Additionally, users will also need administrative privileges (or root access <code>sudo</code>) for the installation.</p>"},{"location":"software_overview/#connecting-to-the-zed-x20p","title":"Connecting to the ZED-X20P","text":"<p>Before users can connect to the ZED-X20P GNSS Flex module, they will need to specify the settings of the UART port in PyGPSClient. Once configured, users can select the  button and PyGPSClient will automatically attempt to connect to the GNSS module.</p> <ul> <li>Below, is a list of the default settings for <code>UART</code> ports of the ZED-X20P. These settings should be selected in the configuration menu.</li> <li>For the <code>Serial Port</code>, select the port associated with the attached UART interface.</li> </ul> <p></p> <p>Specify the settings for the UART port in PyGPSClient.</p> Default Settings <p>The UART ports of the ZED-X20P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 38400bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"software_overview/#arduino-ide","title":"Arduino IDE","text":"<p>Tip</p> <p>For first-time users, who have never programmed before and are looking to use the Arduino IDE, we recommend beginning with the SparkFun Inventor's Kit (SIK), which is designed to help users get started programming with the Arduino IDE.</p> <p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p> <ul> <li> <p> <p>What is an Arduino?</p> <li> <p> <p>Installing the Arduino IDE</p> <li> <p> <p>Installing an Arduino Library</p> <li> <p> <p>Installing Board Definitions in the Arduino IDE</p>"},{"location":"software_overview/#sparkfun-u-blox-gnss-v3-library","title":"SparkFun u-blox GNSS v3 Library","text":"<p>The SparkFun u-blox GNSS v3 library can be installed from the library manager in the Arduino IDE by searching for:</p> <pre><code>SparkFun u-blox GNSS v3\n</code></pre> <p></p> <p>SparkFun u-blox GNSS v3 library in the library manager of the Arduino IDE.</p> <p>Manually Download the Arduino Library</p> <p>For users who would like to manually download and install the library, the <code>*.zip</code> file can be accessed from the GitHub repository or downloaded by clicking the button below.</p> <p>  Download the Arduino Library </p>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"ubx_protocol/","title":"UBX Protocol","text":""},{"location":"ubx_protocol/#ubx-protocol","title":"UBX Protocol","text":"<p>u-blox receivers support a u-blox-proprietary protocol (UBX) to communicate with a host computer. This protocol has the following key features:</p> <ul> <li>Compact - uses 8-bit binary data</li> <li>Checksum protected - uses a low-overhead checksum algorithm</li> <li>Modular - uses a two-stage message identifier (Class and Message ID)</li> </ul>"},{"location":"ubx_protocol/#message-structure","title":"Message Structure","text":"<p>The structure of a basic UBX frame is shown in the following diagram.</p> <p></p> <p>The structure of a basic UBX message.</p> <ul> <li>Every frame starts with a 2-byte preamble consisting of two synchronization characters: <code>0xb5</code> and <code>0x62</code>.</li> <li>A 1-byte message class field follows. A class is a group of messages that are related to each other.</li> <li>A 1-byte message ID field defines the message that is to follow.</li> <li>A 2-byte length field follows. The length is defined as being that of the payload only. It does not include the preamble, message class, message ID, length, or UBX checksum fields. The number format of the length field is an unsigned little-endian 16-bit integer (a \"U2\" in UBX data types).</li> <li>The payload field contains a variable number (= length) of bytes.</li> <li>The two 1-byte <code>CK_A</code> and <code>CK_B</code> fields hold a 16-bit checksum whose calculation is defined in UBX checksum section. This concludes the frame.</li> </ul>"},{"location":"ubx_protocol/#acknowledgement","title":"Acknowledgement","text":"<p>When messages from the class <code>CFG</code> are sent to the receiver, the receiver will send an acknowledge (<code>UBX-ACK-ACK</code>) or a not acknowledge (<code>UBX-ACK-NAK</code>) message back to the sender, depending on whether or not the message was processed correctly.</p>"},{"location":"ubx_protocol/#common-ubx-messages","title":"Common UBX Messages","text":"<p><code>UBX-ACK</code> - Acknowledgement and negative acknowledgement messages</p> Message Class/ID Description (Type) <code>UBX-ACK-ACK</code> <code>0x05 0x01</code> - Message acknowledged (Output) <code>UBX-ACK-NAK</code> <code>0x05 0x00</code> - Message not acknowledged (Output) <p><code>UBX-CFG</code> - Configuration and command messages</p> Message Class/ID Description (Type) <code>UBX-CFG-CFG</code> <code>0x06 0x09</code> - Clear, save and load configurations (Command) <code>UBX-CFG-RST</code> <code>0x06 0x04</code> - Reset receiver / Clear backup data structures (Command) <code>UBX-CFG-VALDEL</code> <code>0x06 0x8c</code> - Delete configuration item values (Set)- Delete configuration item values (with transaction) (Set) <code>UBX-CFG-VALGET</code> <code>0x06 0x8b</code> - Get configuration items (Poll request)- Configuration items (Polled) <code>UBX-CFG-VALSET</code> <code>0x06 0x8a</code> - Set configuration item values (Set)- Set configuration item values (with transaction) (Set) <p><code>UBX-MON</code> - Monitoring messages</p> Message Class/ID Description (Type) <code>UBX-MON-SYS</code> <code>0x0A 0x39</code> Current system performance information for monitoring purposes <code>UBX-MON-VER</code> <code>0x0a 0x04</code> - Poll receiver and software version (Poll request)- Receiver and software version (Polled) <p><code>UBX-NAV</code> - Navigation solution messages</p> Message Class/ID Description (Type) <code>UBX-NAV-POSLLH</code> <code>0x01 0x02</code> - Geodetic position solution (Periodic/polled) <code>UBX-NAV-PVT</code> <code>0x01 0x07</code> - Navigation position velocity time solution (Periodic/polled) <p><code>UBX-UPD</code> - Firmware update messages</p> Message Class/ID Description (Type) <code>UBX-UPD-SOS</code> <code>0x09 0x14</code> - Poll backup restore status (Poll request)- Create backup in flash (Command)- Clear backup in flash (Command)- Backup creation acknowledge (Output)- System restored from backup (Output)"},{"location":"github/contribute/","title":"Contribute","text":""},{"location":"github/contribute/#make-an-augmentation","title":"Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun GNSS ZED-X20P repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>/Hardware</code> directories of the SparkFun GNSS ZED-X20P repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Submit Issues","text":""},{"location":"github/file_issue/#need-assistance","title":"Need Assistance?","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#did-we-make-a-mistake","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun GNSS ZED-X20P repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>/Hardware</code> directories of the SparkFun GNSS ZED-X20P repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}